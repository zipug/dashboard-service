// Code generated by MockGen. DO NOT EDIT.
// Source: ./internal/presentation/http/chi/handlers/register/register.go
//
// Generated by this command:
//
//	mockgen -package mocks -destination ./internal/presentation/http/chi/handlers/register/mocks/mock_register.go -source ./internal/presentation/http/chi/handlers/register/register.go
//

// Package mocks is a generated GoMock package.
package mocks

import (
	dto "dashboard/internal/application/dto"
	logger "dashboard/internal/common/service/logger/zerolog"
	reflect "reflect"

	jwtauth "github.com/go-chi/jwtauth/v5"
	gomock "go.uber.org/mock/gomock"
)

// MockDashboardService is a mock of DashboardService interface.
type MockDashboardService struct {
	ctrl     *gomock.Controller
	recorder *MockDashboardServiceMockRecorder
	isgomock struct{}
}

// MockDashboardServiceMockRecorder is the mock recorder for MockDashboardService.
type MockDashboardServiceMockRecorder struct {
	mock *MockDashboardService
}

// NewMockDashboardService creates a new mock instance.
func NewMockDashboardService(ctrl *gomock.Controller) *MockDashboardService {
	mock := &MockDashboardService{ctrl: ctrl}
	mock.recorder = &MockDashboardServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDashboardService) EXPECT() *MockDashboardServiceMockRecorder {
	return m.recorder
}

// RegisterUser mocks base method.
func (m *MockDashboardService) RegisterUser(arg0 dto.UserDto) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RegisterUser", arg0)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RegisterUser indicates an expected call of RegisterUser.
func (mr *MockDashboardServiceMockRecorder) RegisterUser(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RegisterUser", reflect.TypeOf((*MockDashboardService)(nil).RegisterUser), arg0)
}

// MockLogger is a mock of Logger interface.
type MockLogger struct {
	ctrl     *gomock.Controller
	recorder *MockLoggerMockRecorder
	isgomock struct{}
}

// MockLoggerMockRecorder is the mock recorder for MockLogger.
type MockLoggerMockRecorder struct {
	mock *MockLogger
}

// NewMockLogger creates a new mock instance.
func NewMockLogger(ctrl *gomock.Controller) *MockLogger {
	mock := &MockLogger{ctrl: ctrl}
	mock.recorder = &MockLoggerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockLogger) EXPECT() *MockLoggerMockRecorder {
	return m.recorder
}

// Log mocks base method.
func (m *MockLogger) Log(arg0 logger.LoggerAction, arg1 string, arg2 ...logger.LoggerEvent) {
	m.ctrl.T.Helper()
	varargs := []any{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	m.ctrl.Call(m, "Log", varargs...)
}

// Log indicates an expected call of Log.
func (mr *MockLoggerMockRecorder) Log(arg0, arg1 any, arg2 ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Log", reflect.TypeOf((*MockLogger)(nil).Log), varargs...)
}

// MockAuth is a mock of Auth interface.
type MockAuth struct {
	ctrl     *gomock.Controller
	recorder *MockAuthMockRecorder
	isgomock struct{}
}

// MockAuthMockRecorder is the mock recorder for MockAuth.
type MockAuthMockRecorder struct {
	mock *MockAuth
}

// NewMockAuth creates a new mock instance.
func NewMockAuth(ctrl *gomock.Controller) *MockAuth {
	mock := &MockAuth{ctrl: ctrl}
	mock.recorder = &MockAuthMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAuth) EXPECT() *MockAuthMockRecorder {
	return m.recorder
}

// GetTokenAuth mocks base method.
func (m *MockAuth) GetTokenAuth() *jwtauth.JWTAuth {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTokenAuth")
	ret0, _ := ret[0].(*jwtauth.JWTAuth)
	return ret0
}

// GetTokenAuth indicates an expected call of GetTokenAuth.
func (mr *MockAuthMockRecorder) GetTokenAuth() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTokenAuth", reflect.TypeOf((*MockAuth)(nil).GetTokenAuth))
}

// HashPassword mocks base method.
func (m *MockAuth) HashPassword(arg0 string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HashPassword", arg0)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// HashPassword indicates an expected call of HashPassword.
func (mr *MockAuthMockRecorder) HashPassword(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HashPassword", reflect.TypeOf((*MockAuth)(nil).HashPassword), arg0)
}
